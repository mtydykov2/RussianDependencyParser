Welcome to RussianDependencyParser version 1.0

To get started, you will need to download and install several 
dependencies:

1. Download/install the Lingua RU Open Corpora Tokenizer via the command prompt/terminal:
     $ cpan
     $ install Lingua::RU::OpenCorpora::Tokenizer
2. Download/install TreeTagger:
     1. Go to http://www.cis.uni-muenchen.de/~schmid/tools/TreeTagger/
     2. Follow the download/installation instructions
     3. Copy the contents of the TreeTagger root directory to
     RussianDependencyParser/tree-tagger
3. Download the parameter files for Russian:
     1. Go to http://corpus.leeds.ac.uk/mocky/
     2. Download russian.par.gz
     3. Download russian-small.par.gz
     4. Unzip these files in the RussianDependencyParser/tree-tagger directory
4. Download the Pymorphy module via the command prompt/terminal:
     $ pip install pymorphy
     
---------------------------------------------
Training

To train the parser, you can use the RussianDependencyParser/train.py
script provided as follows:

python train.py -t MODEL_TYPE
optional arguments: -m MORPH -l LEMMA N-u -d -c COARSE_POS

-MODEL_TYPE can be any one of the TurboParser model types - basic, standard, full
-MORPH can be one of {"pymorphy", "treetagger"}
-LEMMA can be one of {"pymorphy", "treetagger"}
-COARSE_POS can be one of {"split", "tagset"}

The script takes all files with a _annotated extension from the 
RussianDependencyParser/allData/training/ directory and combines it into one file, 
RussianDependencyParser/all_train.conll. It then proceeds to 
add the features indicated into the final training file which 
is then used as input to the TurboParser. Finally, it filters the features based on the
parameters, and trains the parser accordingly. 

---------------------------------------------

Parsing

To parse, you can use the RussianDependencyParser/parse.py
script provided as follows:

python parse.py -f FILE_TO_PARSE

optional arguments: -m MORPH -l LEMMA N-u -d -c COARSE_POS

-MODEL_TYPE can be any one of the TurboParser model types - basic, standard, full
-MORPH can be one of {"pymorphy", "treetagger"}
-LEMMA can be one of {"pymorphy", "treetagger"}
-COARSE_POS can be one of {"split", "tagset"}


The parser should be tested using the same features as were used for training. 
For example, if you trained the parser with morphological features from TreeTagger and 
coarse part of speech tags from the tagset, make sure you use these same features for testing.
The resulting parsed file will be written out in the same directory where
the original file resided as "original_filename.conll.predicted". 

You can try this out on article_66, located in RussianDependencyParser/test_scripts/.

NOTE: this tool does not currently split morphological features into attribute-value pairs. It treats all morphological information about a token as a single value.
